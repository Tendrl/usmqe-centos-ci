
- job-template:
    name: "1-{clustername}-cluster-create"
    display-name: '1 - {clustername} Cluster create'
    description: 'Do not edit this job through the web! Deploy machines for testing.'
    project-type: freestyle
    defaults: global
    parameters:
        - bool:
            name: RUN_CLUSTER_INSTALL
            default: true
            description: "Run cluster-install job?"
        - bool:
            name: RUN_API_TESTS
            default: "{obj:run_api_tests}"
            description: "Run API tests?"
        - bool:
            name: RUN_WEB_TESTS
            default: "{obj:run_web_tests}"
            description: "Run web tests? (it is not good idea to run API and web tests at once)"
        - choice:
            name: CLUSTER_CONFIGURATION
            choices: "{obj:cluster_configuration_choices}"
            description: "Cluster configuration (definition)."

    disabled: "{obj:disabled}"
    triggers:
      - timed: '{timed}'
    concurrent: false
    quiet-period: 5
    block-downstream: true
    block-upstream: true
    properties:
      - build-blocker:
          use-build-blocker: true
          blocking-jobs:
            - "1-.*-cluster-create"
    wrappers:
        - ansicolor:
            colormap: "xterm"
        - timeout:
            timeout: '{timeout}'
            abort: true
            type: absolute
    node: '{node}'
    builders:
     #   - shell: !include-raw: ../scripts/get-node.sh
     #   - shell: centos-ci/scripts/bootstrap.sh libgfapi-python.sh
        - shell: |
            #!/bin/bash -xe
            # load OS credentials to env
     #       source ~/.nova-jenkins-openrc.sh
     #       # create cluster
     #       python usm-cluster/mycluster.py -t {node} -c usm-cluster-definition/{clustername}_${{CLUSTER_CONFIGURATION}}.ini -i {clustername}.hosts -u usersys_{clustername}.hosts
     #       {cluster_create_extra_command}
     #   - shell: |
     #       #!/bin/bash -xe
     #       /bin/cp ${{WORKSPACE}}/{clustername}.hosts ${{HOME}}/{clustername}.hosts
     #       #sleep 120
     #   - shell: |
     #       #!/bin/bash -xe
     #       cat ${{HOME}}/{clustername}.hosts

    publishers:
        - conditional-publisher:
          - condition-kind: shell
            condition-command: "[[ \"$RUN_CLUSTER_INSTALL\" == 'true' ]]"
            on-evaluation-failure: dont-run
            action:
                - trigger-parameterized-builds:
                    - project: '2-{clustername}-cluster-install'
                      current-parameters: true
                      condition: 'SUCCESS'
                      fail-on-missing: true
        # return machines in case of deployment failure
        - conditional-publisher:
          - condition-kind: current-status
            condition-wort: FAILURE
            condition-best: UNSTABLE
            on-evaluation-failure: dont-run
            action:
                - trigger-parameterized-builds:
                    - project: 'X-{clustername}-cluster-teardown'
                      current-parameters: true
                      fail-on-missing: true

- job-template:
    name: "X-{clustername}-cluster-teardown"
    display-name: 'X - {clustername} Cluster teardown'
    description: 'Do not edit this job through the web! Return machines back to pool.'
    project-type: freestyle
    defaults: global
    disabled: "{obj:disabled}"
    triggers:
      - timed: '{timed}'
    concurrent: false
    quiet-period: 5
    block-downstream: true
    block-upstream: true
    properties:
      - build-blocker:
          use-build-blocker: true
          blocking-jobs:
            - "X-.*-cluster-teardown"
    wrappers:
        - ansicolor:
            colormap: "xterm"
        - timeout:
            timeout: '{timeout}'
            abort: true
            type: absolute
    node: '{node}'
    builders:
        - shell: !include-raw: ../scripts/return-node.sh
        #- shell: |
        #    #!/bin/bash -xe
        #    # load OS credentials to env
        #    source ~/.nova-jenkins-openrc.sh
        #    # create cluster
        #    python usm-cluster/mycluster.py -t {node} -c usm-cluster-definition/{clustername}_${{CLUSTER_CONFIGURATION}}.ini -i {clustername}.hosts -u usersys_{clustername}.hosts
        #    {cluster_create_extra_command}
        #- shell: |
        #    #!/bin/bash -xe
        #    /bin/cp ${{WORKSPACE}}/{clustername}.hosts ${{HOME}}/{clustername}.hosts
        #    #sleep 120
        #- shell: |
        #    #!/bin/bash -xe
        #    cat ${{HOME}}/{clustername}.hosts

- project:
    name: "tendrl-deploy"
    jobs:
      - 'tendrl-jobs'
    clustername:
      - centos-tendrl1:
          timed: ''
          timeout: 60
          disabled: false
          node: 'tendrl-ci-slave01'
          run_api_tests: false
          run_web_tests: false
          cluster_configuration_choices:
            - gluster2
