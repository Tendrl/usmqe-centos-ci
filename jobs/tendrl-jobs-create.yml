
- job-template:
    name: "1-{clustername}-cluster-create"
    display-name: '1 - {clustername} Cluster create'
    description: 'Do not edit this job through the web! Deploy machines for testing.'
    project-type: freestyle
    defaults: global
    parameters:
        - bool:
            name: RUN_CLUSTER_INSTALL
            default: true
            description: "Run cluster-install job?"
        - bool:
            name: RUN_API_TESTS
            default: "{obj:run_api_tests}"
            description: "Run API tests?"
        - bool:
            name: RUN_WEB_TESTS
            default: "{obj:run_web_tests}"
            description: "Run web tests? (it is not good idea to run API and web tests at once)"
        - choice:
            name: CLUSTER_CONFIGURATION
            choices: "{obj:cluster_configuration_choices}"
            description: "Cluster configuration (definition)."
    scm:
        - git:
            url: 'https://github.com/mkudlej/usmqe-centos-ci.git'
            branches:
                - "*/master"
            basedir: usmqe-centos-ci
            skip-tag: true
            wipe-workspace: true

    disabled: "{obj:disabled}"
    triggers:
      - timed: '{timed}'
    concurrent: false
    quiet-period: 5
    block-downstream: true
    block-upstream: true
    properties:
      - build-blocker:
          use-build-blocker: true
          blocking-jobs:
            - "1-.*-cluster-create"
    wrappers:
        - ansicolor:
            colormap: "xterm"
        - timeout:
            timeout: '{timeout}'
            abort: true
            type: absolute
    node: '{node}'
    builders:
        - shell: |
            #!/bin/bash -xe
            # Get machines from CentOS CI pool
            env
            cd ${{WORKSPACE}}/usmqe-centos-ci/ansible
            ANSIBLE_DIR=${{WORKSPACE}}/usmqe-centos-ci/ansible
            CICO_DIR=/usr/lib/python2.7/site-packages/cicoclient/ansible/
            ansible-playbook -i ${{ANSIBLE_DIR}}/empty.hosts -vvv -e clustername={clustername} -M ${{CICO_DIR}} ${{ANSIBLE_DIR}}/{clustername}.yml
        - shell: |
            #!/bin/bash -x
            # Print Ansible host file
            cat ${{HOME}}/{clustername}.hosts
        - shell: |
            #!/bin/bash -x
            # Prepare 2 disks in all Gluster machines
            ansible-playbook -i ${{HOME}}/{clustername}.hosts -vvv -e devices_count=2 ${{ANSIBLE_DIR}}/centos_devices.yml
 
    publishers:
        - conditional-publisher:
          - condition-kind: shell
            condition-command: "[[ \"$RUN_CLUSTER_INSTALL\" == 'true' ]]"
            on-evaluation-failure: dont-run
            action:
                - trigger-parameterized-builds:
                    - project: '2-{clustername}-cluster-install'
                      current-parameters: true
                      condition: 'SUCCESS'
                      fail-on-missing: true
        # return machines in case of deployment failure
        - conditional-publisher:
          - condition-kind: current-status
            condition-worst: FAILURE
            condition-best: UNSTABLE
            on-evaluation-failure: dont-run
            action:
                - trigger-parameterized-builds:
                    - project: 'X-{clustername}-cluster-teardown'
                      current-parameters: true
                      fail-on-missing: true

- job-template:
    name: "X-{clustername}-cluster-teardown"
    display-name: 'X - {clustername} Cluster teardown'
    description: 'Do not edit this job through the web! Return machines back to pool.'
    project-type: freestyle
    defaults: global
    disabled: "{obj:disabled}"
    triggers:
      - timed: '{timed}'
    concurrent: false
    quiet-period: 5
    block-downstream: true
    block-upstream: true
    properties:
      - build-blocker:
          use-build-blocker: true
          blocking-jobs:
            - "X-.*-cluster-teardown"
    wrappers:
        - ansicolor:
            colormap: "xterm"
        - timeout:
            timeout: '{timeout}'
            abort: true
            type: absolute
    node: '{node}'
    builders:
        - shell: |
            #!/bin/bash -xe
            # Return machines to CentOS CI pool
            env
            cd ${{WORKSPACE}}/usmqe-centos-ci/ansible
            ANSIBLE_DIR=${{WORKSPACE}}/usmqe-centos-ci/ansible
            CICO_DIR=/usr/lib/python2.7/site-packages/cicoclient/ansible/
            ansible-playbook -i ${{ANSIBLE_DIR}}/empty.hosts -vvv -e clustername={clustername} -M ${{CICO_DIR}} ${{ANSIBLE_DIR}}/centos-teardown.yml
        - shell: |
            #!/bin/bash -x
            # Make sure that all machines return to pool
            cd ${{WORKSPACE}}/usmqe-centos-ci/ansible
            ANSIBLE_DIR=${{WORKSPACE}}/usmqe-centos-ci/ansible
            CICO_DIR=/usr/lib/python2.7/site-packages/cicoclient/ansible/
            ansible-playbook -i ${{ANSIBLE_DIR}}/empty.hosts -vvv -e clustername={clustername} -M ${{CICO_DIR}} ${{ANSIBLE_DIR}}/centos-inventory.yml
            if [ "$?" == "0" ]; then 
              echo "There are still machine for cluster {clustername} which should be returned to pool."
              exit 1;
            else
              exit 0;
            fi

- job-group:
    name: 'tendrl-jobs'
    jobs:
    - '1-{clustername}-cluster-create'
    - 'X-{clustername}-teardown'

- project:
    name: "tendrl-deploy"
    jobs:
      - 'tendrl-jobs'
    clustername:
      - centos-tendrl1:
          timed: ''
          timeout: 60
          disabled: false
          node: 'tendrl-ci-slave01'
          run_api_tests: false
          run_web_tests: false
          cluster_configuration_choices:
            - gluster2
